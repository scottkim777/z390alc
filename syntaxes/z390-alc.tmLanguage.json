{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "z390-alc",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#mnemonics"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#labels"
		}
	],
	"repository": {
		"comments": {
			"patterns": [				
				{
					"name": "comment.block.z390-alc",
					"begin": "/\\*",
					"end": "\\*/"
				},
				{
					"name": "comment.line.z390-alc",
					"begin": "\\*",
					"end": "\\n"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.z390-alc",
					"match": "\\b(?i:ds|dc)\\b"
				},
				{
					"name": "string.other.lua.z390-alc",
					"match": "(?i:(?<=\\s)(?:equ|org|align|(de|un)?phase|csect|dsect|drop|eject|end|ltorg|opsyn|print|space|start|title|using)\\b)"
				},
				{
					"name": "keyword.control.z390-alc ",
					"match": "(?i:(?<=\\s)(?:close|dcb|eqreg|slink|getmain|freemain|save|get|open|put|return|wto)\\b)"
				},
				{
					"name": "string.other.lua.z390-alc",
					"begin": "(?i:(?<=\\s)(lua)\\b)",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.z390-alc"
						}
					},
					"end": "(?i:(?<=\\s)(endlua)\\b)",
					"endCaptures": {
						"1": {
							"name": "keyword.control.z390-alc"
						}
					}
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"match": "(?i:(af'))",
					"captures": {
						"1": {
							"name": "support.type.register.z390-alc"
						}
					}
				},
				{
					"name": "string.quoted.single.z390-alc",
					"match": "(\\'.*\\')"
				},
				{
					"name": "string.quoted.single.z390-alc",
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.z390-alc"
						}
					},
					"end": "(\\')|(\\s)|(\\))|((?:[^\\\\\\n])$)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.z390-alc"
						},
						"2": {
							"name": "invalid.illegal.newline.z390-alc"
						}
					},
					"patterns": [
						{
							"include": "#string-character-escape"
						}
					]
				},
				{
					"name": "string.quoted.double.z390-alc",
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.z390-alc"
						}
					},
					"end": "(\")|((?:[^\\\\\\n])$)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.z390-alc"
						},
						"2": {
							"name": "invalid.illegal.newline.z390-alc"
						}
					},
					"patterns": [
						{
							"include": "#string-character-escape"
						}
					]
				}
			]
		},
		"string-character-escape": {
			"patterns": [
				{
					"name": "constant.character.escape.z390-alc",
					"match": "\\\\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
				}
			]
		},
		"mnemonics": {
			"patterns": [
				{
					"name": "support.type.flag.z390-alc",
					"match": "\\b(?i:(j[pr]|call|ret))(?:\\s+(?i:([cmpz]|n[cz]|p[eo])))?\\b",
					"captures": {
						"1": {
							"name": "keyword.mnemonic.z390-alc"
						},
						"2": {
							"name": "meta.preprocessor.flag.z390-alc"
						}
					}
				},
				{
					"name": "keyword.mnemonic.z390-alc",
					"match": "\\b(?i:a|ad|ah|ap|ar|b|bal|balr|bas|basr|bc|bcr|bct|bctr|bh|bl|be|bnh|bnl|bne|bp|bm|bz|bo|bnp|bnm|bnz|bno|br|c|ch|clc|clcl|cli|clm|cp|cr|cvb|cvd|d|dp|dr|ed|ic|icm|l|la|lh|lm|lr|ltr|m|mh|mp|mr|mvc|mvcl|mvi|mvn|mvo|mvz|n|nc|ni|nop|nopr|nr|o|oc|oi|or|pack|s|sh|sla|sll|sp|sr|sra|srl|srp|st|stc|stcm|sth|stm|tm|tr|unpk|x|xc|xi|xr|zap)\\b"
				},
				{
					"name": "support.type.register.z390-alc",
					"match": "\\b(?i:R1|R2|R3|R4|R5|R6|R7|R8|R9|R10|R11|R12|R13|R14|R15)\\b"
				},
				{
					"name": "constant.language.operator.z390-alc",
					"match": "(?i:\\{(?:scott|kim)?\\})"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "invalid",
					"match": "^\\{5}"
				},
				{
					"name": "constant.numeric.integer.hexadecimal.z390-alc",
					"match": "[\\$#][0-9a-fA-F]+"
				},
				{
					"name": "constant.numeric.integer.hexadecimal.z390-alc",
					"match": "scott([a-zA-Z])*,([a-zA-Z])*"
				},
				{
					"name": "constant.numeric.integer.hexadecimal.z390-alc",
					"match": "SCOTT\\s(\\w.*?),(\\w.*?)\\s"
				},

				{
					"name": "constant.numeric.integer.hexadecimal.z390-alc",
					"match": "(\\-?[0-9a-fA-F]+[hH])\\b"
				},
				{
					"name": "constant.numeric.integer.hexadecimal.z390-alc",
					"match": "(\\-?0x[0-9a-fA-F]+)\\b"
				},
				{
					"name": "constant.numeric.integer.binary.z390-alc",
					"match": "%[01]+\\b"
				},
				{
					"name": "constant.numeric.integer.binary.z390-alc",
					"match": "\\b[01]+[bB]\\b"
				},
				{
					"name": "constant.numeric.integer.decimal.z390-alc",
					"match": "\\-?\\d+"
				}
			]
		},
		"labels": {
			"patterns": [
				{
					"match": "^\\@?((\\$\\$(?!\\.))?[\\w\\.]+)[:\\s]",
					"captures": {
						"1": {
							"name": "entity.name.function.z390-alc"
						}
					}
				},
				{
					"match": "\\b([a-zA-Z][\\w\\.]+)\\b",
					"name": "variable.parameter.label.z390-alc"
				}

			]
		}
	},
	"scopeName": "source.z390alc"
}